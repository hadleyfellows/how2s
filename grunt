Grunt ReadMe

Configuation
	grunt.initConfig({
	  concat: {
	  },
	  jshint: {
	  }
	});
Creating tasks
	grunt.registerTask(taskName, [description, ] taskList)
	ex. 1
	grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);
	ex. 2
	grunt.registerTask('foo', 'A sample task that logs stuff.', function(arg1, arg2) {
	  if (arguments.length === 0) {
	    grunt.log.writeln(this.name + ", no args");
	  } else {
	    grunt.log.writeln(this.name + ", " + arg1 + " " + arg2);
	  }
	});
Creating multi Tasks
	grunt.registerMultiTask(taskName, [description, ] taskFunction)
		grunt.initConfig({
		  log: {
		    foo: [1, 2, 3],
		    bar: 'hello world',
		    baz: false
		  }
		});

		grunt.registerMultiTask('log', 'Log stuff.', function() {
		  grunt.log.writeln(this.target + ': ' + this.data);
		});

Running Tasks
	grunt.task.run(taskList)
	ex.
		grunt.registerTask('serve', 'Compile then start a connect web server', gruntServe);
		function gruntServe (target) {
		  if (target === 'dist') {
		    return grunt.task.run(['build', 'connect:dist:keepalive']);
		  }
		  grunt.task.run([
		    'clean:server',
		    'wiredep',
		    'concurrent:server',
		    'autoprefixer',
		    'connect:livereload',
		    'watch'
		  ]);
		};

Option definitions
	dot --> Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot.
	expand : true
		ex.
			// Add vendor prefixed styles
			var autoprefixer = {
			  options: {
			    browsers: ['last 1 version']
			  },
			  dist: {
			    files: [{
			      expand: true,
			      cwd: '.tmp/styles/',
			      src: '{,*/}*.css',
			      dest: '.tmp/styles/'
			    }]
			  }
			};
		def :
			cwd  : All src matches are relative to (but don't include) this path.
			src  : Pattern(s) to match, relative to the cwd.
			dest  : Destination path prefix.
			ext  : Replace any existing extension with this value in generated dest paths.
			extDot  : Used to indicate where the period indicating the extension is located. Can take either 'first' (extension begins after the first period in the file name) or 'last' (extension begins after the last period), and is set by default to 'first' [Added in 0.4.3]
			flatten : Remove all path parts from generated dest paths.
			rename  : This function is called for each matched src file, (after extension renaming and flattening). The dest and matched src path are passed in, and this function must return a new dest value. If the same dest is returned more than once, each src which used it will be added to an array of sources for it.

Mapping
	ex. 
		grunt.initConfig({
		  uglify: {
		    static_mappings: {
		      // Because these src-dest file mappings are manually specified, every
		      // time a new file is added or removed, the Gruntfile has to be updated.
		      files: [
		        {src: 'lib/a.js', dest: 'build/a.min.js'},
		        {src: 'lib/b.js', dest: 'build/b.min.js'},
		        {src: 'lib/subdir/c.js', dest: 'build/subdir/c.min.js'},
		        {src: 'lib/subdir/d.js', dest: 'build/subdir/d.min.js'},
		      ],
		    },
		    dynamic_mappings: {
		      // Grunt will search for "**/*.js" under "lib/" when the "uglify" task
		      // runs and build the appropriate src-dest file mappings then, so you
		      // don't need to update the Gruntfile when files are added or removed.
		      files: [
		        {
		          expand: true,     // Enable dynamic expansion.
		          cwd: 'lib/',      // Src matches are relative to this path.
		          src: ['**/*.js'], // Actual pattern(s) to match.
		          dest: 'build/',   // Destination path prefix.
		          ext: '.min.js',   // Dest filepaths will have this extension.
		          extDot: 'first'   // Extensions in filenames begin after the first dot
		        },
		      ],
		    },
		  },
		});
Templating
	grunt.initConfig({
	  concat: {
	    sample: {
	      options: {
	        banner: '/* <%= baz %> */\n',   // '/* abcde */\n'
	      },
	      src: ['<%= qux %>', 'baz/*.js'],  // [['foo/*.js', 'bar/*.js'], 'baz/*.js']
	      dest: 'build/<%= baz %>.js',      // 'build/abcde.js'
	    },
	  },
	  // Arbitrary properties used in task configuration templates.
	  foo: 'c',
	  bar: 'b<%= foo %>d', // 'bcd'
	  baz: 'a<%= bar %>e', // 'abcde'
	  qux: ['foo/*.js', 'bar/*.js'],
	});

Globbing patterns
	* matches any number of characters, but not /
	? matches a single character, but not /
	** matches any number of characters, including /, as long as it's the only thing in a path part
	{} allows for a comma-separated list of "or" expressions
	! at the beginning of a pattern will negate the match

	examples:	
			// You can specify single files:
			{src: 'foo/this.js', dest: ...}
			// Or arrays of files:
			{src: ['foo/this.js', 'foo/that.js', 'foo/the-other.js'], dest: ...}
			// Or you can generalize with a glob pattern:
			{src: 'foo/th*.js', dest: ...}

			// This single node-glob pattern:
			{src: 'foo/{a,b}*.js', dest: ...}
			// Could also be written like this:
			{src: ['foo/a*.js', 'foo/b*.js'], dest: ...}

			// All .js files, in foo/, in alpha order:
			{src: ['foo/*.js'], dest: ...}
			// Here, bar.js is first, followed by the remaining files, in alpha order:
			{src: ['foo/bar.js', 'foo/*.js'], dest: ...}

			// All files except for bar.js, in alpha order:
			{src: ['foo/*.js', '!foo/bar.js'], dest: ...}
			// All files in alpha order, but with bar.js at the end.
			{src: ['foo/*.js', '!foo/bar.js', 'foo/bar.js'], dest: ...}

			// Templates may be used in filepaths or glob patterns:
			{src: ['src/<%= basename %>.js'], dest: 'build/<%= basename %>.min.js'}
			// But they may also reference file lists defined elsewhere in the config:
			{src: ['foo/*.js', '<%= jshint.all.src %>'], dest: ...}



JSHINT
	command :
		grunt jshint:beforeconcat concat jshint:afterconcat
	configuration :
		example :
			var jshint = {
			  // configuration options
			  options: {
			  	// object with checks to run
			    jshintrc: '.jshintrc',
			    // what will be used to display messages
			    reporter: require('jshint-stylish'),
			    // specify an output for messages
			    reporterOutput : 'path/to/file'
			  },
			  // specify files to jslint / jshint
			  all: {
			    src: [
			      'Gruntfile.js',
			      '<%= yeoman.app %>/{,*/}*.js'
			    ]
			  },
			  // specify files ot jshint / jslint for tests
			  test: {
			    options: {
			      jshintrc: 'test/.jshintrc'
			    },
			    src: ['test/spec/{,*/}*.js']
			  },
			  beforeconcat: ['src/foo.js', 'src/bar.js'],
			  afterconcat: ['dist/output.js']
			};

CONCAT
	def :
		concat in grunt compiles all the source js files into a minified js file in dist folder
	configuration:
		// Project configuration.
		grunt.initConfig({
		  concat: {
		    dist: {
		      src: ['src/foo.js', 'src/bar.js'],
		      dest: 'dist/output.js'
		    }
		  },
		  jshint: {
		    beforeconcat: ['src/foo.js', 'src/bar.js'],
		    afterconcat: ['dist/output.js']
		  }
		});
