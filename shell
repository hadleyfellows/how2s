What Kernel Is?

Kernel is hart of Linux Os.
It manages resource of Linux Os. Resources means facilities available in Linux. For e.g. Facility to store data, print data on printer, memory, file management etc .

Kernel decides who will use this resource, for how long and when. It runs your programs (or set up to execute binary files).

The kernel acts as an intermediary between the computer hardware and various programs/application/shell.


It's Memory resident portion of Linux. It performance following task :-

I/O management
Process management
Device management
File management
Memory management







Shell is not part of system kernel, but uses the system kernel to execute programs, create files etc.

Several shell available with Linux including:

BASH ( Bourne-Again SHell )	Brian Fox and Chet Ramey
	Free Software Foundation
	Most common shell in Linux. It's Freeware shell.
CSH (C SHell)	Bill Joy	University of California (For BSD)	The C shell's syntax and usage are very similar to
	the C programming language.
	KSH (Korn SHell)	David Korn	AT & T Bell Labs	
	--
TCSH	See the man page.
	Type $ man tcsh	
	--
	TCSH is an enhanced but completely compatible version of the Berkeley UNIX C shell (CSH).

Tip: To find all available shells in your system type following command:
$ cat /etc/shells


Tip: To find your current shell type following command
$ echo $SHELL

Shell script defined as:
"Shell Script is series of command written in plain text file. Shell script is just like batch file is MS-DOS but have more power than the MS-DOS batch file."







BASIC

	1.
		Examples:
		$ chmod +x your-script-name
		$ chmod 755 your-script-name

		Note: This will set read write execute(7) permission for owner, for group and other permission is read and execute only(5).

		(3) Execute your script as syntax ( +extension ): 
			bash your-script-name
			sh your-script-name
			./your-script-name

			ie. basic.txt
			ie. basic.sh



	2. SYSTEM VARIABLES

		BASH=/bin/bash	
			Our shell name
		BASH_VERSION=1.14.7(1)	
			Our shell version name
		COLUMNS=80	
			No. of columns for our screen
		HOME=/home/vivek	
			Our home directory
		LINES=25	
			No. of columns for our screen
		LOGNAME=students	
			students Our logging name
		OSTYPE=Linux	
			Our Os type
		PATH=/usr/bin:/sbin:/bin:/usr/sbin	
			Our path settings
		PS1=[\u@\h \W]\$	
			Our prompt settings
		PWD=/home/students/Common	
			Our current working directory
		SHELL=/bin/bash	
			Our shell name
		USERNAME=vivek	
			User name who is currently login to this PC
		

		NOTE that Some of the above settings can be different in your PC/Linux environment. You can print any of the above variables contains as follows:
		
			$ echo $USERNAME
			$ echo $HOME

	3. UDV user defined variables
		$ vech=Bus
			$vech
		$ n=10
			$n

	4. more variables

		(4) You can define NULL variable as follows (NULL variable is variable which has no value at the time of definition) For e.g.
		$ vech=
		$ vech=""
		Try to print it's value by issuing following command
		$ echo $vech
		Nothing will be shown because variable has no value i.e. NULL variable.

	5. ECHO OPTIONS

		echo [options] [string, variables...]
		Displays text or variables value on screen.
		Options
		-n Do not output the trailing new line.
		-e Enable interpretation of the following backslash escaped characters in the strings:
		\a alert (bell)
		\b backspace
		\c suppress trailing new line
		\n new line
		\r carriage return
		\t horizontal tab
		\\ backslash


	6. Shell Arithmetic

		Use to perform arithmetic operations.

		Syntax:
		expr op1 math-operator op2

		Examples: 
		$ expr 1 + 3
		$ expr 2 - 1
		$ expr 10 / 2
		$ expr 20 % 3
		$ expr 10 \* 3
		$ echo `expr 6 + 3`

	7. QUOTES

		$ echo "Today is date" 
		Can't print message with today's date.
		$ echo "Today is `date`". 
		It will print today's date as, Today is Tue Jan ....,Can you see that the `date` statement uses back quote?

	8. WILDCARDS


		$ ls *	
			will show all files
		$ ls a*	
			will show all files whose first name is starting with letter 'a'
		$ ls *.c  	
			will show all files having extension .c
		$ ls ut*.c	
			will show all files having extension .c but file name must begin with 'ut'.
		?	
			Matches any single character.	
		$ ls ?  	
			will show all files whose names are 1 character long 
		$ ls fo?	
			will show all files whose names are 3 character long and file name begin with fo
		[...]	
			Matches any one of the enclosed characters	
		$ ls [abc]* 	
			will show all files beginning with letters a,b,c
		$ ls /bin/[a-c]*
			Will show all files name beginning with letter a,b or c like

			   /bin/arch           /bin/awk           /bin/bsh     /bin/chmod           /bin/cp
			   /bin/ash           /bin/basename   /bin/cat      /bin/chown           /bin/cpio
			   /bin/ash.static   /bin/bash          /bin/chgrp   /bin/consolechars  /bin/csh

		$ ls /bin/[!a-o]
		$ ls /bin/[^a-o]
			If the first character following the [ is a ! or a ^ ,then any character not enclosed is matched i.e. do not show us file name that beginning with a,b,c,e...o, like


	9. Mutliple commands

		Syntax:
		command1;command2
		To run two command with one command line.

		Examples:
		$ date;who 
		Will print today's date followed by users who are currently login. 

	10. Bash Commands --help

		$ ls foo
			LIST
		$ cp y y.bak
			COPY
		$ mv y.bak y.okay
			MOVE
		$ tail -10 myf
			Tail is cool, reads file from top or from bottom X number of lines
				tail -10 myFile - reads the last 10 lines of the file
		$ head -10 myf
			HEAD is cool, reads file from top or from top X number of lines
				head -10 myFile - reads the first 10 lines of the file
		$ mail myBalls
			- mail does not exist sucka
		$ sort -r -n myf
			SORT - Sorted the file lines alphabetically
		$ date
			DATE 
		$ clear
			CLEARS

	11. COMMAND ARGUMENTS

		In shell if we wish to refer this command line argument we refer above as follows
		
		$ myshell foo bar
		$0 = myshell
		$1 = foo
		$2 = bar

		Please note at a time such 9 arguments can be used from $1..$9, You can also refer all of them by using $* (which expand to `$1,$2...$9`). Note that $1..$9 i.e command line arguments to shell script is know as "positional parameters".

	12. MATH ?
		$ sum 11 20
		$ math 4 - 7
		$ d
		$ bp -5 myf +20
		$ Ls *
		$ cal
		$ findBS 4 8 24 BIG

	13. REDIRECTION

		>
			ls > filename --- outputs command to file
		>>
			ls >> filename --- output command to end of file
		<
			cat < filename --- imports file to terminal

	14. CAT ( The cat (short for “concatenate“)  )

		$cat > sname
			vivek
			ashish
			zebra
			babu
		Press CTRL + D to save.

		$ sort < sname > sorted_names
		$ tr "[a-z]" "[A-Z]" < sname > cap_names
			changes lower case names to upper case names

		$ sort > new_sorted_names < sname
			sorts sname and exported to new_sorted_names 
		$ cat new_sorted_names
	15. PIPE

		command1 | command2
			the output of command 1 is used as input for command 2
	
			A pipe is a way to connect the output of one program to the input of another program without any temporary file.

	16. FILTER

		$ tail +20 < hotel.txt | head -n30 >hlist

			a. grabs first 20 lines from hotel.txt
			b. outputs lines as variable head
			c. output is redirected to hlist

	17. PROCESS

		A process is program (command given by user) to perform specific Job.
			ie. "ls" - lists items

		Linux is a multi-process system
			ie. $ "ls / -R | wc -l &"


	18. COMMANDS

		For this purpose	
			Use this Command	
				Examples*
		ps	= To see currently running process 	
			$ ps
		kill    {PID} = To stop any process by PID i.e. to kill process
			$ kill  1012
		killall   {Process-name} = To stop processes by name i.e. to kill process	
			$ killall httpd
		ps -ag	= To get information about all running process
			$ ps -ag
		kill 0	= To stop all process except your shell
			$ kill 0
		linux-command  & = For background processing (With &, use to put particular command and program in background)
			$ ls / -R | wc -l &
		ps aux = To display the owner of the processes along with the processes
			$ ps aux
		ps ax | grep  process-U-want-to see	= To see if a particular process is running or not. For this purpose you have to use ps command in combination with the grep command
			For e.g. you want to see whether Apache web server process is running or not then give command
			$ ps ax | grep httpd
		top = To see currently running processes and other information like memory and CPU usage with real time updates.	
			See the output of top command.	
			$ top
				Note that to exit from top command press q.
		$ pstree = To display a tree of processes	pstree

	19. BC
		"bc" command allows user to do math and evaluate numbers
		ie.
			bc
			5+2
			7
			4==5
			0
			5 == (10-5)
			1

	20. IF CONDITION
		!$ = previous argument
		$# = number of arguments
		$0 = filename ?
		$1 = first argument or parameter

		Example 1

			$ cat > showfile
			#!/bin/sh
			#
			#Script to print file
			#
			if cat $1
			then
			echo -e "\n\nFile $1, found and successfully echoed"
			fi

			$ showfile apple

		Example 2

			cat > ipositive
			#!/bin/sh
			#
			# Script to see whether argument is positive
			#
			if test $1 -gt 0
			then
			echo "$1 number is positive"
			fi

			$ ipositive 5

		Example 3

			#!/bin/sh
			echo $#
			if [ $# -eq 0 ]
			then
			echo "$0 : You must give/supply one integers"
			exit 1
			fi

			if test $1 -gt 0
			then
			echo "$1 number is positive"
			else
			echo "$1 number is negative"
			fi

		Example 4

			$ vi nestedif.sh
			osch=0

			echo "1. Unix (Sun Os)"
			echo "2. Linux (Red Hat)"
			echo -n "Select your os choice [1 or 2]? "
			read osch

			if [ $osch -eq 1 ] ; then

			     echo "You Pick up Unix (Sun Os)"

			else #### nested if i.e. if within if ######
			            
			       if [ $osch -eq 2 ] ; then
			             echo "You Pick up Linux (Red Hat)"
			       else
			             echo "What you don't like Unix/Linux OS."
			       fi
			fi

		Example 5

			$ cat > elf
			#
			#!/bin/sh
			# Script to test if..elif...else
			#
			if [ $1 -gt 0 ]; then
			  echo "$1 is positive"
			elif [ $1 -lt 0 ]
			then
			  echo "$1 is negative"
			elif [ $1 -eq 0 ]
			then
			  echo "$1 is zero"
			else
			  echo "Opps! $1 is not number, give number"
			fi

	21. EXPRESSIONS

		example 
			"5 -eq 6" || "20 > 4"

			-eq	= (is equal to)	5 == 6	
			-ne	= (is not equal to)	5 != 6
			-lt	= (is less than) 5 < 6
			-le	= (is less than or equal to) 5 <= 6
			-gt	= (is greater than)	5 > 6
			-ge	= (is greater than or equal to)

		FOR STRINGS

			string1 = string2	( string1 is equal to string2 )
			string1 != string2	( string1 is NOT equal to string2 )
			string1	string1     ( is NOT NULL or not defined ) 
			-n string1	        ( string1 is NOT NULL and does exist )
			-z string1	        ( string1 is NULL and does exist )

		FOR FILES AND DIRECTORIES 

			-s file   	( Non empty file )
			-f file   	( Is File exist or normal file and not a directory )
			-d dir    	( Is Directory exist and not a file )
			-w file  	( Is writeable file )
			-r file   	( Is read-only file )
			-x file   	( Is file is executable )

		LOGICAL OPERATORS

			! expression	Logical NOT
			expression1  -a  expression2	Logical AND
			expression1  -o  expression2	Logical OR

	22. WHILE & FOR LOOP

		#
		# Example 4
		#
		for ((i=0;i<3;i++))
		do
			for((j=0;j<2;j++))
			do
				echo "like "
				# echo -e -n "\033[47m "
				# echo -e -n "\033[40m "
			done
			echo "wow"
		done

		#
		# Example WHILE
		#
		n=5
		i=1
		while [ $i -le 10 ]
		do
		  echo "$n * $i = `expr $i \* $n`"
		  i=`expr $i + 1`
		done

	23. 
